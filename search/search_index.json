{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome To the Wiki This isn't for you, but you're free to use the information here. If something doesn't look right, let me know wm@chlf.dev What is this? It's a wiki! A collection of information. There may be no common theme, just anything that may seem useful. Where is this? It is not here nor there. It's built using MkDocs hotsed on GitHub Pages .","title":"Home"},{"location":"#welcome-to-the-wiki","text":"This isn't for you, but you're free to use the information here. If something doesn't look right, let me know wm@chlf.dev","title":"Welcome To the Wiki"},{"location":"#what-is-this","text":"It's a wiki! A collection of information. There may be no common theme, just anything that may seem useful.","title":"What is this?"},{"location":"#where-is-this","text":"It is not here nor there. It's built using MkDocs hotsed on GitHub Pages .","title":"Where is this?"},{"location":"mkdocs/","text":"MkDocs \"MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.\" https://www.mkdocs.org/ Pre-Req Dependencies recent version of Python and pip Tip Ubuntu comes with a version of Python , so only pip needed to be installed. Check the version of Python installed with python --version . Installation $ pip install mkdocs Creating new Wiki $ mkdocs new <project-name> mkdocs will create a new project named <project-name> current directory. cd -ing into that directory shows the below starter structure. . |-- mkdocs.yml +-- docs/ | +-- index.md Configuration configuration is handled through the mkdocs.yml file, at first it'll look like site_name: MkDocs site_name is equivilant to the <title> tag in html, it defines the name of the website along with the heading that is displayed on page. Additional Useful Parameters site_url defines the url that the sites will be accessible by. nav defines the navigation on the site, each page is then listed in points nested under in a key-value style defining Name:pagefile.md Deployment For this site, it is deployed using GitHub Pages . Using the command $ mkdocs build mkdocs generates a site directory in the project root where resides the static rendering of the wiki. Auto Deployment with GitHub Workflows Credit to Thomas Ardal on elmah.io for the below workflow yml file that allowed for auto deployment into with GitHub workflows. name: build on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/setup-python@v2 with: python-version: 3.x - run: pip install mkdocs - run: mkdocs gh-deploy --force --clean --verbose Above configuration is placed inside .github/workflows/build.yml and committed into the project main branch. GitHub will pick it up automatically and run whenever a new commit is pushed to the branch. The GitHub workflow runs the mkdocs gh-deploy --force --clean --verbose command in their environment where it'll build the wiki and copy it into the gh-pages branch of the project. Aftwards, GitHub pages takes over and deployes the newly committed static files to your page. Permissions An issue that occured during initial deployment was that the github-actions[bot] was unable to performactions on the branches in the repository. This was resolved through settings the Workflow permissions under Settings > Code and automation > Actions > General > Workflow permissions , setting that to Read and write permissions resolved that issue. Note Custom domains will need to be verified via CNAME by GitHub before GitHub will accept it. Useful information about that can be found here . LChen - March 21, 2023","title":"MkDocs"},{"location":"mkdocs/#mkdocs","text":"\"MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.\" https://www.mkdocs.org/","title":"MkDocs"},{"location":"mkdocs/#pre-req","text":"","title":"Pre-Req"},{"location":"mkdocs/#dependencies","text":"recent version of Python and pip Tip Ubuntu comes with a version of Python , so only pip needed to be installed. Check the version of Python installed with python --version .","title":"Dependencies"},{"location":"mkdocs/#installation","text":"$ pip install mkdocs","title":"Installation"},{"location":"mkdocs/#creating-new-wiki","text":"$ mkdocs new <project-name> mkdocs will create a new project named <project-name> current directory. cd -ing into that directory shows the below starter structure. . |-- mkdocs.yml +-- docs/ | +-- index.md","title":"Creating new Wiki"},{"location":"mkdocs/#configuration","text":"configuration is handled through the mkdocs.yml file, at first it'll look like site_name: MkDocs site_name is equivilant to the <title> tag in html, it defines the name of the website along with the heading that is displayed on page. Additional Useful Parameters site_url defines the url that the sites will be accessible by. nav defines the navigation on the site, each page is then listed in points nested under in a key-value style defining Name:pagefile.md","title":"Configuration"},{"location":"mkdocs/#deployment","text":"For this site, it is deployed using GitHub Pages . Using the command $ mkdocs build mkdocs generates a site directory in the project root where resides the static rendering of the wiki.","title":"Deployment"},{"location":"mkdocs/#auto-deployment-with-github-workflows","text":"Credit to Thomas Ardal on elmah.io for the below workflow yml file that allowed for auto deployment into with GitHub workflows. name: build on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/setup-python@v2 with: python-version: 3.x - run: pip install mkdocs - run: mkdocs gh-deploy --force --clean --verbose Above configuration is placed inside .github/workflows/build.yml and committed into the project main branch. GitHub will pick it up automatically and run whenever a new commit is pushed to the branch. The GitHub workflow runs the mkdocs gh-deploy --force --clean --verbose command in their environment where it'll build the wiki and copy it into the gh-pages branch of the project. Aftwards, GitHub pages takes over and deployes the newly committed static files to your page.","title":"Auto Deployment with GitHub Workflows"},{"location":"mkdocs/#permissions","text":"An issue that occured during initial deployment was that the github-actions[bot] was unable to performactions on the branches in the repository. This was resolved through settings the Workflow permissions under Settings > Code and automation > Actions > General > Workflow permissions , setting that to Read and write permissions resolved that issue. Note Custom domains will need to be verified via CNAME by GitHub before GitHub will accept it. Useful information about that can be found here . LChen - March 21, 2023","title":"Permissions"},{"location":"cloud/cloud/","text":"Clouds AWS Lambda","title":"Cloud"},{"location":"cloud/cloud/#clouds","text":"","title":"Clouds"},{"location":"cloud/cloud/#aws","text":"Lambda","title":"AWS"},{"location":"cloud/aws/aws-serverless/","text":"AWS Lambda Serverless Functions AWS Lambda is a compute service allowing for code to be ran without provisioning or managing server instances. Running on highly available compute infrastructure it takes on all the tasks of managing the compute resources required, tasks such as server and OS maintianance, scaling, and logging are all handled without end-user interaction. Supported languages on Lambda The following notes will be writing Lambda functions in Python3. Handler The handler is the method in the function code that processes events. When function is invoked, the handler method is run by Lambda. A response is returned to caller when the handler exist. Syntax The general syntax for a handler function in Python is: def handlerName(event, context): ... return someValue Naming By default, Lambda derives the handler name from the filename and function name. This can be overriden in the console. For example: handler.py def lambdaHandler(event, context): ... return someValue Auto-derived handler name would be handler.lambdaHandler . Return Value Lambda handlers can optionally return a value. All values returned are serialized into a JSON format. Return objects must be serializable into JSON, or else an error will be thrown by Lambda. Should the handler not return anything (i.e. a None ) Lambda will return null . Deployment Lambda functions are deployed using a deployment package consisting of scripts/compiled programs and their dependencies. .zip Building a deployment package with .zip archive can be done with any .zip utility. The archive must contain the function code and its dependencies . If the function only requires the standard libraries or AWS SDKs , these are built into the Lambda runtime, and do not need to be included . Deploying wthout dependencies Deploying with dependencies AWS Lambda Context Objects Lambda has a set of context objects that provide information about the invocation, function, and execution environment. Think of these like environment variables in a traditional server invironment. See Developer Guide for list Error Handling Should Lambda run into an error, it will return the exception type, message, and HTTP status code indicating cause of error. List of Invokatable Errors Examples Hello World Here is a simple hello world lambda handler: helloWorld.py def helloHandler(event, context): return 'Hello World!' In the Lambda console, Create function give the function a name like hello-world and set the Runtime to Python 3.9 , the rest can be left as is. Under Code we'll upload helloWorld.zip . Lastly under Runtime settings rename the handler to be helloWorld.helloHandler and make sure Runtime is Python 3.9 . Test In the Code source window, select helloWorld.py and click Test . Give the test event a name, the rest doesn't matter as this function won't use any parameters, and Save . Click Test again to see results. Test Event Name test Response \"Hello World\" Function Logs START RequestId: exxxxxxx-dxxx-4xxx-9xxx-cxxxxxxxxxx Version: $LATEST END RequestId: exxxxxxx-dxxx-4xxx-9xxx-cxxxxxxxxxx REPORT RequestId: exxxxxxx-dxxx-4xxx-9xxx-cxxxxxxxxxx Duration: 1.41 ms Billed Duration: 2 ms Memory Size: 128 MB Max Memory Used: 36 MB Init Duration: 99.36 ms Request ID exxxxxxx-dxxx-4xxx-9xxx-cxxxxxxxxxx References: What is AWS Lambda? LChen - March 21, 2023","title":"AWS Lambda Serverless Functions"},{"location":"cloud/aws/aws-serverless/#aws-lambda-serverless-functions","text":"AWS Lambda is a compute service allowing for code to be ran without provisioning or managing server instances. Running on highly available compute infrastructure it takes on all the tasks of managing the compute resources required, tasks such as server and OS maintianance, scaling, and logging are all handled without end-user interaction. Supported languages on Lambda The following notes will be writing Lambda functions in Python3.","title":"AWS Lambda Serverless Functions"},{"location":"cloud/aws/aws-serverless/#handler","text":"The handler is the method in the function code that processes events. When function is invoked, the handler method is run by Lambda. A response is returned to caller when the handler exist.","title":"Handler"},{"location":"cloud/aws/aws-serverless/#syntax","text":"The general syntax for a handler function in Python is: def handlerName(event, context): ... return someValue","title":"Syntax"},{"location":"cloud/aws/aws-serverless/#naming","text":"By default, Lambda derives the handler name from the filename and function name. This can be overriden in the console. For example: handler.py def lambdaHandler(event, context): ... return someValue Auto-derived handler name would be handler.lambdaHandler .","title":"Naming"},{"location":"cloud/aws/aws-serverless/#return-value","text":"Lambda handlers can optionally return a value. All values returned are serialized into a JSON format. Return objects must be serializable into JSON, or else an error will be thrown by Lambda. Should the handler not return anything (i.e. a None ) Lambda will return null .","title":"Return Value"},{"location":"cloud/aws/aws-serverless/#deployment","text":"Lambda functions are deployed using a deployment package consisting of scripts/compiled programs and their dependencies.","title":"Deployment"},{"location":"cloud/aws/aws-serverless/#zip","text":"Building a deployment package with .zip archive can be done with any .zip utility. The archive must contain the function code and its dependencies . If the function only requires the standard libraries or AWS SDKs , these are built into the Lambda runtime, and do not need to be included . Deploying wthout dependencies Deploying with dependencies","title":".zip"},{"location":"cloud/aws/aws-serverless/#aws-lambda-context-objects","text":"Lambda has a set of context objects that provide information about the invocation, function, and execution environment. Think of these like environment variables in a traditional server invironment. See Developer Guide for list","title":"AWS Lambda Context Objects"},{"location":"cloud/aws/aws-serverless/#error-handling","text":"Should Lambda run into an error, it will return the exception type, message, and HTTP status code indicating cause of error. List of Invokatable Errors","title":"Error Handling"},{"location":"cloud/aws/aws-serverless/#examples","text":"","title":"Examples"},{"location":"cloud/aws/aws-serverless/#hello-world","text":"Here is a simple hello world lambda handler: helloWorld.py def helloHandler(event, context): return 'Hello World!' In the Lambda console, Create function give the function a name like hello-world and set the Runtime to Python 3.9 , the rest can be left as is. Under Code we'll upload helloWorld.zip . Lastly under Runtime settings rename the handler to be helloWorld.helloHandler and make sure Runtime is Python 3.9 .","title":"Hello World"},{"location":"cloud/aws/aws-serverless/#test","text":"In the Code source window, select helloWorld.py and click Test . Give the test event a name, the rest doesn't matter as this function won't use any parameters, and Save . Click Test again to see results. Test Event Name test Response \"Hello World\" Function Logs START RequestId: exxxxxxx-dxxx-4xxx-9xxx-cxxxxxxxxxx Version: $LATEST END RequestId: exxxxxxx-dxxx-4xxx-9xxx-cxxxxxxxxxx REPORT RequestId: exxxxxxx-dxxx-4xxx-9xxx-cxxxxxxxxxx Duration: 1.41 ms Billed Duration: 2 ms Memory Size: 128 MB Max Memory Used: 36 MB Init Duration: 99.36 ms Request ID exxxxxxx-dxxx-4xxx-9xxx-cxxxxxxxxxx References: What is AWS Lambda? LChen - March 21, 2023","title":"Test"},{"location":"misc/dog/","text":"","title":"Dog"},{"location":"misc/policy/","text":"Policies and Stuff Privacy Policy Site doesn't track nor collect anything, it's just a dumb book. I don't care about your information. I don't want it. Terms of Use Information on this site are kept as updated and true as possible. There's no team behind this, heck it's not even ment to be a public resource. But I decided to make it public cause it could be useful for others. Use it however you want, don't be stupid. I claim no sole ownership over any materials posted. They're likely referenced from other sources. I'll try to list any sources used, but sometimes I forget. Contact Email wm@chlf.dev","title":"Policies and Stuff"},{"location":"misc/policy/#policies-and-stuff","text":"","title":"Policies and Stuff"},{"location":"misc/policy/#privacy-policy","text":"Site doesn't track nor collect anything, it's just a dumb book. I don't care about your information. I don't want it.","title":"Privacy Policy"},{"location":"misc/policy/#terms-of-use","text":"Information on this site are kept as updated and true as possible. There's no team behind this, heck it's not even ment to be a public resource. But I decided to make it public cause it could be useful for others. Use it however you want, don't be stupid. I claim no sole ownership over any materials posted. They're likely referenced from other sources. I'll try to list any sources used, but sometimes I forget.","title":"Terms of Use"},{"location":"misc/policy/#contact","text":"Email wm@chlf.dev","title":"Contact"}]}